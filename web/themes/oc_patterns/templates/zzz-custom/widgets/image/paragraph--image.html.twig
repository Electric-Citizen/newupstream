{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% extends "paragraph.html.twig" %}

{% set style = content.field_image_style[0]['#markup'] %}



{# Define image style based on picker #}
{% if (style == 'small') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'small') %}


{% elseif (style == 'medium') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'medium') %}


{% elseif (style == 'large') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'large') %}


{% elseif (style == 'full') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'full') %}


{% elseif (style == 'square') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'square') %}

{% elseif (style == 'banner') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'banner') %}


{% elseif (style == 'default') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'default') %}


{% endif %}



{% block widgetContent %}
	{% embed "@organisms/02-widgets/image/image.twig" 
		with{
			widget_title: content.field_widget_title.0['#context'].value,
			image_style: style,
			image_link: content.field_oc_link.0['#url'],
			image_aria: content.field_oc_link.0['#title'],

		}
	%}

		{% block plwidgetopen %}{# patternlab specifc html #}{% endblock %}

		{# block image is wrapped in block imageWrapper in pattern lab to detect if it is linked 
		we need the extra block to strip out pattern lab html structure and use drupal rendered entities #}
		{% block image %}
			{{ image }}
		{% endblock %}

		{% block imageText %}
			{{ content.field_oc_long_text }}
		{% endblock %}

		{% block plwidgetclose %}{# patternlab specifc html #}{% endblock %}

	{% endembed %}

	
{% endblock %}

