{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% extends "paragraph.html.twig" %}


{# NOTES
------------
	This template extends the parent paragraphs.html.twig by bringing in the entire content of a widget and wrapping it with the background style selected by the user. If no style is set, then it just prints the content. 
	
	{{ bgImage }} and {{ special }} are global variables extended from paragraphs.html
#}

{% block widgetContent %}
	{{ attach_library('oc_patterns/reveal') }}
	
	{% set columns = content.field_column_style[0]['#markup'] %}

	{# figure out if a background style is set and provide the propper wrapper #}
	{% if (content.field_background_style[0]['#markup'] == 'image') and (content.field_background_image.0|render) %}
	{# add class of image and set style background image #}
		<div class="{{special}}" style="background:url({{ bgImage }}) no-repeat">
	{% elseif (content.field_background_style[0]['#markup']|render) and (content.field_background_style[0]['#markup'] != 'image') %}
		<div class="widget-color {{special}}">
	{% endif %}

			<div class="wrapper {{columns}}">
				<div class="title-wrap">{{content.field_widget_title}}</div>
				{# print the content without the styling fields #}
    			{{ content|without('field_background_style', 'field_background_image', 'field_widget_title', 'field_column_style') }}
    		</div>

 	{% if content.field_background_style[0]['#markup']|render %}
 		</div>
 	{% endif %}

{% endblock %}