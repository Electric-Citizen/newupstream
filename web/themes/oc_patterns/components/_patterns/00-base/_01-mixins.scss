/* ===========
		MIXINS
=================== */

//   For help see the mixins refernce chart in Pattern Lab: 
//   /pattern-lab/public/?p=base-mixins  or 
//   /public/?p=base-mixins


/* HELPER MIXINS (used as a basis for other mixins or for browser prefixing)
----------------- */

///mixin - transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

///mixin - translate
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
@mixin translateX ($x) {
	@include transform(translateX($x));
}
@mixin translateY ($y) {
	@include transform(translateY($y));
}
@mixin translate3d ($x, $y, $z) {
	@include transform(translate3d($x, $y, $z));
}

///mixin - skew
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

///mixin - scale
@mixin scale($scalex, $scaley) {
	@include transform(scale($scalex, $scaley));
}
@mixin scale3d($scalex, $scaley, $scalez) {
	@include transform(scale($scalex, $scaley, $scalez));
}

///mixin - rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
@mixin rotate3d ($rotx, $roty, $rotz, $deg) {
	@include transform(rotate3d($rotx, $roty, $rotz, #{$deg}deg));
}

///mixin - perspective
@mixin perspective ($perspective) {
	@include transform(perspective(#{$perspective}));
}

///mixin - transform-origin
@mixin transformOrigin ($origin) {
	-moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

///mixin - backface-visibility
@mixin backfaceVisibility($backface){
	-webkit-backface-visiblity: $backface;
	-moz-backface-visiblity: $backface;
	backface-visiblity: $backface;
}

///mixin - backgroundSize
@mixin backgroundSize($back-width, $back-height){
	background-size: #{$back-width} #{$back-height};
}

///mixin - transition
@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
	backface-visibility: hidden;
}

///mixin - opacity
@mixin opacity($opacity){
	opacity: #{$opacity};
	filter: Alpha(opacity=($opacity * 100));
}

///mixin - column-count
@mixin columnCount($column){
	-webkit-column-count: #{$column};
	-moz-column-count: #{$column};
	column-count: #{$column};
}

///mixin - column-gap
@mixin columnGap($gap){
	-webkit-column-gap: #{$gap};
	-moz-column-gap: #{$gap};
	column-gap: #{$gap};
}


///mixin - calc
@mixin calc($property, $expression) { 
	#{$property}: -webkit-calc(#{$expression});
	#{$property}: -moz-calc(#{$expression});  
	#{$property}: calc(#{$expression}); 
}

///mixin - calcForce
@mixin calcForce($property, $expression) { 
	#{$property}: -webkit-calc(#{$expression}) !important;
	#{$property}: -moz-calc(#{$expression}) !important;  
	#{$property}: calc(#{$expression}) !important; 
}



/*  STYLE MIXINS
------------------- */

/// mixin - browserWipe
@mixin browserWipe{
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}


/// mixin - overlay
@mixin overlay{
	&:before{
		content: '';
		display: block;
		width: 100%;
		height: 100%;
		background: $imgOverlay;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 2;
	}
}

///mixin - imageHover
@mixin imageHover{
	border: 1px solid $lightGray;
	&:hover,&:focus{
		border-color: $darkGrey;
		@include opacity(.7);
		@include transThreeAll;
	}
}


///mixin - listReset
@mixin listReset {
	list-style: none;
	margin: 0;
	padding: 0;
}



///mixin - fullback
@mixin fullBack($fullback){
	content: '';
	display: block;
	position: absolute;
	top: 0;
	left: -50vw;
	z-index: -1;
	width: 200vw;
	height: 100%;
	background: $fullback;
}

///mixin - fullBack
@mixin halfBack($backColor,$backSide){
	content: '';
	display: block;
	position: absolute;
	top: 0;
	z-index: -1;
	width: 100vw;
	height: 100%;
	background: $backColor;
	@if $backSide == 'right'{
		left: 0;
	}@else{
		right: 0;
	}
}

///mixin - vert rule
@mixin vertRule($rulePosition,$ruleHeight,$ruleColor) {
	content: '';
	display: block;
	position: absolute;
	#{$rulePosition}: 0;
	top: (100% - $ruleHeight) / 2;
	width: 1px;
	height: $ruleHeight;
	background: $ruleColor;
}

///mixin - gradient
@mixin gradient($grad-direction,$grad-start,$grad-stop) { 
	background: -moz-linear-gradient($grad-direction, $grad-start 0%,$grad-stop 100%); /* FF3.6+ */  
	background: -webkit-linear-gradient($grad-direction, $grad-start 0%,$grad-stop 100%); /* Chrome10+,Safari5.1+ */ 
	background: -o-linear-gradient($grad-direction, $grad-start 0%,$grad-stop 100%); /* Opera 11.10+ */ 
	background: -ms-linear-gradient($grad-direction, $grad-start 0%,$grad-stop 100%); /* IE10+ */ 
	@if $grad-direction == 'top'{	
		background: linear-gradient(to bottom, $grad-start 0%,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'bottom'{
		background: linear-gradient(to top, $grad-start 0%,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'left'{
		background: linear-gradient(to right, $grad-start 0%,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'right'{
		background: linear-gradient(to left, $grad-start 0%,$grad-stop 100%); /* W3C */
	}
	
}


@mixin triangle($triDirection,$triHeight,$triWidth,$triColor){
	width: 0;
	height: 0;
	-webkit-transform: rotate(0.05deg);
	-moz-transform: scale(1.1);
	transform: rotate(0.05deg);
	$actualWidth: $triWidth / 2;
	$actualHeight: $triHeight / 2;
	@if $triDirection == 'up'{	
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-bottom: $triHeight solid $triColor;
	}@else if $triDirection == 'down'{
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-top: $triHeight solid $triColor;
	}@else if $triDirection == 'left'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-right: $triWidth solid $triColor;
	}@else if $triDirection == 'right'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-left: $triWidth solid $triColor;
	}
}

///mixin - gradient
@mixin gradient($gradDirection,$gradStart,$gradStop) { 
	background: -moz-linear-gradient($gradDirection, $gradStart 0%,$gradStop 100%); /* FF3.6+ */  
	background: -webkit-linear-gradient($gradDirection, $gradStart 0%,$gradStop 100%); /* Chrome10+,Safari5.1+ */ 
	background: -o-linear-gradient($gradDirection, $gradStart 0%,$gradStop 100%); /* Opera 11.10+ */ 
	background: -ms-linear-gradient($gradDirection, $gradStart 0%,$gradStop 100%); /* IE10+ */ 
	@if $gradDirection == 'top'{	
		background: linear-gradient(to bottom, $gradStart 0%,$gradStop 100%); /* W3C */
	}@else if $gradDirection == 'bottom'{
		background: linear-gradient(to top, $gradStart 0%,$gradStop 100%); /* W3C */
	}@else if $gradDirection == 'left'{
		background: linear-gradient(to right, $gradStart 0%,$gradStop 100%); /* W3C */
	}@else if $gradDirection == 'right'{
		background: linear-gradient(to left, $gradStart 0%,$gradStop 100%); /* W3C */
	}
	
}

// move arrows outside of slick and change color
@mixin outsideSliderArrows{
	padding-left: 20px;
	padding-right: 20px;

	//override arrow padding then there are not enough slick items to have slider / have buttons
	.slick-list:only-child{
		@include edgeToEdge;
	}
	.slick-arrow{
		&.slick-prev{
			left: 0;
			&:before{
				border-right-color: $lightGrey;
			}
			&:hover:before{
				border-right-color: $link;
			}
		}
		&.slick-next{
			right: 0;
			&:before{
				border-left-color: $lightGrey;
			}
			&:hover:before{
				border-left-color: $link;
			}
		}
	}
}



/* LAYOUT MIXINS
-------------------- */
$contentW: $maxWidth;
$textW: $maxWidthText;

///mixin - auto
@mixin auto{
	margin-left: auto;
	margin-right: auto;
}

///mixin - edgeToEdge
@mixin edgeToEdge {
	margin-left:-20px;
	margin-right:-20px;
}

///mixin - edgeToEdge
@mixin edgeReset {
	margin-left:-20px;
	margin-right:-20px;
}

///mixin - clearfix
@mixin clearFix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}

///mixin - paddedContent
@mixin paddedContent{
	@include calc(max-width, "#{$contentW} + 40px");
	padding-left: 20px;
	padding-right: 20px;
}

///mixin - paddedText
@mixin paddedText{
	@include calc(max-width, "#{$textW} + 40px");
	padding-left: 20px;
	padding-right: 20px;
}


///mixin safe-flex
@mixin safeFlex($direction, $wrap, $justify, $align){
	display: flex;
	display: -ms-flexbox;
	flex-direction: $direction;
	-ms-flex-direction: $direction;
	@if $wrap == 'wrap'{
		flex-wrap: wrap;
		-ms-flex-wrap: wrap;
	}@else{
		flex-wrap: nowrap;
		-ms-flex-wrap: none;
	}
	@if $justify == 'start'{
		justify-content: flex-start;
		-ms-flex-pack: start;
	}@else if $justify == 'end'{
		justify-content: flex-end;
		-ms-flex-pack: end;
	}@else if $justify == 'center'{
		justify-content: center;
		-ms-flex-pack: center;
	}@else if  $justify == 'justify'{
		justify-content: space-between;
		-ms-flex-pack: justify;
	}
	@if $align == 'start'{
		align-items: flex-start;
		-ms-flex-align: start;
	}@else if $align == 'end'{
		align-items: flex-end;
		-ms-flex-align: end;
	}@else if $align == 'center'{
		align-items: center;
		-ms-flex-align: center;
	}@else if $align == 'stretch'{
		align-items: stretch;
		-ms-flex-align: stretch;
	}@else if $align == 'baseline'{
		align-items: baseline;
		-ms-flex-align: baseline;
	}
}//end safe-flex


///mixin safe flex size
@mixin safeFlexSize($grow, $shrink, $size){
	flex: $grow $shrink $size;
	-ms-flex: $grow $shrink $size;
}


///mixin safe flex order
@mixin safeFlexOrder($order){
	order: $order;
	-ms-flex-order: $order;
}

@mixin twoColumn($xAlign,$yAlign,$colSpace){
	width: 100%;
	@include bleed($colSpace);
	@include safeFlex(row,wrap,$xAlign,$yAlign);
	& > *{
		width: 100%;
		padding-left: $colSpace / 2;
		padding-right: $colSpace / 2;
		@include smallTab{
			width: 50%;
		}
	}
}

///mixin - three-column
@mixin threeColumn($xAlign,$yAlign,$colSpace){
	width: 100%;
	@include bleed($colSpace);
	@include safeFlex(row,wrap,$xAlign,$yAlign);
	& > *{
		width: 100%;
		padding-left: $colSpace / 2;
		padding-right: $colSpace / 2;
		@include smallTab{
			width: 50%;
		}
		@include tab{
			width: 33.333%;
		}	
	}
}

///mixin - three-column
@mixin fourColumn($xAlign,$yAlign,$colSpace){
	width: 100%;
	@include bleed($colSpace);
	@include safeFlex(row,wrap,$xAlign,$yAlign);
	& > *{
		width: 100%;
		padding-left: $colSpace / 2;
		padding-right: $colSpace / 2;
		@include smallTab{
			width: 50%;
		}
		@include tab{
			width: 33.333%;
		}
		@include tab{
			width: 25%;
		}	
	}
}


/// mixin widget Full
@mixin widgetFull{
	@include edgeToEdge;
	@include calc(max-width, "100% + 40px");
	.beaker &,.bunsen &{
		@include tab{
			@include edgeReset;
			max-width: 100%;
		}
	}
	.kermit &{
		@include maxWidth{
			@include edgeReset;
			max-width: 100%;
		}
	}
}


@mixin spacer($spaceMultiplier){
	margin-bottom: 1em * $spaceMultiplier;
}

@mixin bleed($bleedWidth){
	margin-left: $bleedWidth * -0.5;
	margin-right: $bleedWidth * -0.5;
	@include calc(width, "100% + "$bleedWidth);
}




